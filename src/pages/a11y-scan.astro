---
import AxeBuilder from "@axe-core/playwright";
import { chromium } from "playwright";
import BaseLayout from "../layouts/BaseLayout.astro";

const pageTitle="Scan a Web Page";

let scanResults = null;
let scanError = null;
let url = null;

// Handle the form submission
if (Astro.request.method === "POST") {
    let browser = null;
    let context = null;
    let page = null;

    try {
        const formData = await Astro.request.formData();
        url = formData.get("url");

        // Validate URL
        try {
            const urlObj = new URL(url);
            if (!["http:", "https:"].includes(urlObj.protocol)) {
                throw new Error("URL must use HTTP or HTTPS protocol");
            }
        } catch (urlError) {
            throw new Error(
                "Please enter a valid URL (e.g., https://example.com)",
            );
        }

        console.log("Starting scan for URL:", url);

        browser = await chromium.launch({
            headless: true,
        });

        context = await browser.newContext();
        page = await context.newPage();

        try {
            await page.goto(url, {
                waitUntil: "networkidle",
                timeout: 30000,
            });
        } catch (navigationError) {
            throw new Error(
                "Unable to access the website. Please check if the URL is correct and the website is accessible.",
            );
        }

        scanResults = await new AxeBuilder({ page })
            .withTags(["wcag2a", "wcag2aa", "wcag21a", "wcag21aa", "wcag22aa","best-practice"])
            .analyze();

        // Sort violations by impact
        if (scanResults && scanResults.violations) {
            const impactOrder = {
                critical: 0,
                serious: 1,
                moderate: 2,
                minor: 3
            };
            scanResults.violations.sort((a, b) => {
                const impactA = impactOrder[a.impact] ?? 4;
                const impactB = impactOrder[b.impact] ?? 4;
                return impactA - impactB;
            });
        }

        await page.close();
        await context.close();
        await browser.close();

        console.log("Scan completed successfully");
    } catch (error) {
        console.error("Server error:", error);
        scanError = error.message;

        // Clean up Playwright resources if they exist
        try {
            if (page) await page.close();
            if (context) await context.close();
            if (browser) await browser.close();
        } catch (cleanupError) {
            console.error("Cleanup error:", cleanupError);
        }
    }
}
---

<BaseLayout pageTitle={pageTitle}>
    <p>
    Enter a URL to scan for accessibility issues based on WCAG 2.2 Level AA standards and best practices.
    This automated tool should not replace comprehensive
    manual testing or a full accessibility audit. Use it as a starting point to
    identify potential areas for improvement.
    </p>
    <form method="POST">
        <label for="url">URL:</label>
        <input
            type="url"
            id="url"
            name="url"
            required
            pattern="https?://.*"
            value={url || ""}
            aria-describedby="url-help"
        />
        <p id="url-help">
            Include the full URL. For example: https://hello.com.
        </p>
        <button type="submit"> Scan URL </button>
    </form>

    {
        scanError && (
            <div>
                <strong>Error:</strong> {scanError}
            </div>
        )
    }

    {
        scanResults && (
            <div>
                <div class="results-header">
                    <h2>Scan Results for {url}</h2>
                    
                </div>
                {scanResults.violations.length > 0 && (
                    <p>
                        <strong>
                            Found
                            {scanResults.violations.length} accessibility
                            {scanResults.violations.length === 1
                                ? " violation"
                                : " violations"}!
                        </strong>
                    </p>
                    <div class="overflow-auto">
                        <table>
                            <thead>
                                <tr>
                                    <th>Impact</th>
                                    <th>Description</th>
                                    <th>Help</th>
                                    <th>Elements</th>
                                </tr>
                            </thead>
                            <tbody>
                                {scanResults.violations.map((violation) => (
                                    <tr>
                                        <td>{violation.impact || "Unknown"}</td>
                                        <td>
                                            {violation.description ||
                                                "No description"}
                                        </td>
                                        <td>
                                            <a
                                                href={violation.helpUrl || "#"}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                            >
                                                {violation.help ||
                                                    "No help available"}
                                                <span class="sr-only">
                                                    {" "}
                                                    (opens in new tab)
                                                </span>
                                                <svg
                                                    class="external-link-icon"
                                                    aria-hidden="true"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    viewBox="0 0 24 24"
                                                    fill="none"
                                                    stroke="currentColor"
                                                    stroke-width="2"
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    focusable="false"
                                                    aria-hidden="true"
                                                    role="img"
                                                >
                                                    <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
                                                    <polyline points="15 3 21 3 21 9" />
                                                    <line
                                                        x1="10"
                                                        y1="14"
                                                        x2="21"
                                                        y2="3"
                                                    />
                                                </svg>
                                            </a>
                                        </td>
                                        <td>
                                            <form
                                                method="POST"
                                                action="/violation-details"
                                                target="_blank"
                                                style="display: inline;"
                                            >
                                                <input
                                                    type="hidden"
                                                    name="data"
                                                    value={JSON.stringify(
                                                        violation,
                                                    )}
                                                />
                                                <input
                                                    type="hidden"
                                                    name="url"
                                                    value={url}
                                                />
                                                <button type="submit">
                                                    {
                                                        (violation.nodes || [])
                                                            .length
                                                    }{" "}
                                                    affected {violation.nodes.length === 1 ? 'element' : 'elements'}
                                                    <span class="sr-only">
                                                        {" "}
                                                        - View details (opens in
                                                        new tab)
                                                    </span>
                                                    <svg
                                                        class="external-link-icon"
                                                        aria-hidden="true"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 24 24"
                                                        fill="none"
                                                        stroke="currentColor"
                                                        stroke-width="2"
                                                        stroke-linecap="round"
                                                        stroke-linejoin="round"
                                                        focusable="false"
                                                        aria-hidden="true"
                                                        role="img"
                                                    >
                                                        <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
                                                        <polyline points="15 3 21 3 21 9" />
                                                        <line
                                                            x1="10"
                                                            y1="14"
                                                            x2="21"
                                                            y2="3"
                                                        />
                                                    </svg>
                                                </button>
                                            </form>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                    <button 
                        id="exportCsv" 
                        data-results={JSON.stringify(scanResults)}
                        data-url={url}
                    >
                        Download Report (.CSV)
                    </button>
                )}
                {scanResults.violations.length === 0 && (
                    <p>
                        <strong>No accessibility violations found! 🎉</strong>
                    </p>
                )}
                <p><b>Scan Engine:</b> {scanResults && <span>axe-core version {scanResults.testEngine.version}</span>}</p>
            </div>
        )
    }
</BaseLayout>

<script>
    import { exportToCsv } from '../scripts/exportCsv';

    const exportButton = document.getElementById('exportCsv');
    if (exportButton) {
        exportButton.addEventListener('click', () => {
            const results = JSON.parse(exportButton.dataset.results || '{}');
            const url = exportButton.dataset.url || '';
            exportToCsv(results, url);
        });
    }
</script>

<style>
    input[type="url"] {
        margin-bottom: 0.225rem;
    }
    #url-help {
        margin-bottom: 1.6rem;
    }
    label {
        font-weight: bold;
    }

    .external-link-icon {
        width: 1em;
        height: 1em;
        display: inline-block;
        margin-left: 0.25em;
        vertical-align: middle;
    }
    th,
    td {
        vertical-align: top;
    }
</style>
