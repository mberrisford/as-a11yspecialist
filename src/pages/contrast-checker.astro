---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout pageTitle="Colour Contrast Checker - Work in Progress">
  
  <p>
    Check if your colour combinations meet the accessibility guidelines for
    contrast ratios.
  </p>
  <p><strong>Accessibility Note:</strong> This tool makes use of HTML color input elements. Support
    for this element varies depending on the browser and screen reader. However, you can 
    also type in the hex values directly into the text input fields.
  </p>

  <div class="contrast-checker">
    <div class="color-inputs">
      <div class="color-input">
        <label for="color1">Foreground Colour:</label>
        <div class="color-input-group">
          <input
            type="text"
            id="color1"
            placeholder="#000000"
            aria-describedby="color1-format"
          />
          <label for="color1-picker" class="sr-only">Foreground Color Picker</label>
          <input
            type="color"
            id="color1-picker"
            value="#000000"
          />
        </div>
        <span id="color1-format" class="hint"
          >Enter the foreground colour in hex format or use the colour picker.</span
        >
      </div>

      <div class="color-input">
        <label for="color2">Background Colour:</label>
        <div class="color-input-group">
          <input
            type="text"
            id="color2"
            placeholder="#FFFFFF"
            aria-describedby="color2-format"
          />
          <label for="color2-picker" class="sr-only">Background Color Picker</label>
          <input
            type="color"
            id="color2-picker"
            aria-label="Background color picker"
            value="#FFFFFF"
          />
        </div>
        <span id="color2-format" class="hint"
          >Enter background colour in hex format or use the colour picker.</span
        >
      </div>
    </div>

    <div class="results" aria-live="polite" aria-atomic="true">
      <div class="contrast-display" aria-hidden="true">
        <div class="sample-text" id="sample-text">Sample Text</div>
      </div>

      <div class="compliance-results">
        <h2>WCAG 2.2 Conformance Report</h2>
        <div class="contrast-ratio">
          <strong>Contrast Ratio: <span id="ratio">21:1</span></strong>
        </div>
        <div class="compliance-grid">
          <div class="compliance-section">
            <h3>Text Contrast</h3>
            <h4>Level AA:</h4>
            <ul role="list">
              <li>
                <strong><span id="aa-normal">Passes</span></strong> for regular text (at least 4.5:1).
              </li>
              <li><strong><span id="aa-large">Passes</span></strong> for large text (at least 3:1).</li>
            </ul>
            <h4>Level AAA:</h4>
            <ul role="list">
              <li>
                <strong><span id="aaa-normal">Passes</span></strong> for regular text (at least 7:1).
              </li>
              <li><strong><span id="aaa-large">Passes</span></strong> for large text (at least 4.5:1).</li>
            </ul>
          </div>

          <div class="compliance-section">
            <h3>Non-text Contrast</h3>
            <h4>Level AA:</h4>
            <ul>
              <li>
                <strong><span id="non-text">Passes</span></strong> for: User interface components,
                informative graphical objects, and focus indicators, etc. (At least 3:1).
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
  <h2>Applicable Guidelines</h2>
  <ul>
    <li>
      <a
        href="https://www.w3.org/WAI/WCAG22/Understanding/contrast-minimum.html"
        target="_blank"
        rel="noopener noreferrer">
        WCAG 1.4.3 Contrast (Minimum) (Level AA)
        <span class="sr-only">Opens in a new tab</span>
        </a>
    </li>
    <li>
      <a
        href="https://www.w3.org/WAI/WCAG22/Understanding/contrast-enhanced.html"
        target="_blank"
        rel="noopener noreferrer">WCAG 1.4.6 Contrast (Enhanced) (Level AAA)
        <span class="sr-only">Opens in a new tab</span>
        </a>
    </li>
     <li>
      <a
        href="https://www.w3.org/WAI/WCAG22/Understanding/non-text-contrast.html"
        target="_blank"
        rel="noopener noreferrer">WCAG 1.4.11 Non-text Contrast (Level AA)
        <span class="sr-only">Opens in a new tab</span>
        </a>
  </ul>

</BaseLayout>

<style>
  .contrast-checker {
    /* max-width: 800px; */
    margin: 2rem auto;
  }

  .color-inputs {
    display: grid;
    gap: 2rem;
    /* margin-bottom: 2rem; */
  }

  @media (min-width: 768px) {
    .color-inputs {
      grid-template-columns: 1fr 1fr;
    }
  }

  .color-input {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .hint {
    font-size: 0.875rem;
  }

  input[type="text"] {
    margin-bottom: 0;
    border-color: var(--pico-muted-border-color);
  }

  .contrast-display {
    padding: 2rem;
    border-radius: 4px;
  }

  .sample-text {
    text-align: center;
    font-size: 1.5rem;
    padding: 2rem;
  }

  .compliance-grid {
    display: grid;
    gap: 2rem;
    margin-top: 1rem;
  }
  .contrast-ratio {
    font-size: 2rem;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 4px solid var(--pico-muted-border-color);
  }

  @media (min-width: 768px) {
    .compliance-grid {
      grid-template-columns: 1fr 1fr;
    }
  }

  .compliance-section {
    padding: 1.5rem;
    border-radius: 4px;
  }

  /* .compliance-results ul {
    list-style: none;
    padding: 0;
    margin: 0;
  } */

  /* .compliance-results ul ul {
    margin-left: 1.5rem;
    margin-top: 0.5rem;
    list-style: disc;
  } */

  .color-input-group {
    display: flex;
    gap: 0.5rem;
    align-items: start;
  }

  .color-input-group input[type="text"] {
    flex: 1;
  }

  .color-input-group input[type="color"] {
    width: 50px;
    height: 38px;
    padding: 0;
    border: 1px solid var(--pico-muted-border-color);
    border-radius: 4px;
    cursor: pointer;
  }

  .color-input-group input[type="color"]:focus {
    outline: none;
    border-color: var(--pico-primary-border);
    border-width: 3px;
    border
  }

  .color-input-group input[type="color"]::-webkit-color-swatch-wrapper {
    padding: 0;
  }

  .color-input-group input[type="color"]::-webkit-color-swatch {
    border: none;
    border-radius: 2px;
  }

  .color-input-group input[type="color"]::-moz-color-swatch {
    border: none;
    border-radius: 2px;
  }

  @media (forced-colors: active) {
    .color-input-group input[type="color"] {
      border: 2px solid currentColor;
    }
  }
</style>

<script>
  function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
      ? {
          r: parseInt(result[1], 16),
          g: parseInt(result[2], 16),
          b: parseInt(result[3], 16),
        }
      : null;
  }

  function getLuminance(r, g, b) {
    let [rs, gs, bs] = [r, g, b].map((c) => {
      c = c / 255;
      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
    });
    return rs * 0.2126 + gs * 0.7152 + bs * 0.0722;
  }

  function getContrastRatio(l1, l2) {
    const lighter = Math.max(l1, l2);
    const darker = Math.min(l1, l2);
    return (lighter + 0.05) / (darker + 0.05);
  }

  function updateContrast() {
    const color1Input = document.getElementById("color1");
    const color2Input = document.getElementById("color2");
    const sampleText = document.getElementById("sample-text");
    const ratioDisplay = document.getElementById("ratio");

    const color1 = color1Input.value;
    const color2 = color2Input.value;

    // Update sample text
    sampleText.style.color = color1;
    sampleText.style.backgroundColor = color2;

    // Calculate contrast ratio
    const rgb1 = hexToRgb(color1);
    const rgb2 = hexToRgb(color2);

    if (rgb1 && rgb2) {
      const l1 = getLuminance(rgb1.r, rgb1.g, rgb1.b);
      const l2 = getLuminance(rgb2.r, rgb2.g, rgb2.b);
      const ratio = getContrastRatio(l1, l2);

      // Update ratio display
      ratioDisplay.textContent = ratio.toFixed(2) + ":1";

      // Update compliance results
      const aaNormal = document.getElementById("aa-normal");
      const aaLarge = document.getElementById("aa-large");
      const aaaNormal = document.getElementById("aaa-normal");
      const aaaLarge = document.getElementById("aaa-large");
      const nonText = document.getElementById("non-text");

      // Text contrast requirements
      aaNormal.textContent = ratio >= 4.5 ? "Passes" : "Fails";
      aaLarge.textContent = ratio >= 3 ? "Passes" : "Fails";
      aaaNormal.textContent = ratio >= 7 ? "Passes" : "Fails";
      aaaLarge.textContent = ratio >= 4.5 ? "Passes" : "Fails";

      // Non-text contrast requirement (3:1 for UI components and graphical objects)
      nonText.textContent = ratio >= 3 ? "Passes" : "Fails";

      [aaNormal, aaLarge, aaaNormal, aaaLarge, nonText].forEach((el) => {
        el.className = el.textContent.includes("Passes") ? "pass" : "fail";
      });
    }
  }

  // Function to normalize color hex value
  function normalizeHex(color) {
    // Remove # if present
    color = color.replace("#", "");
    // Convert 3-digit hex to 6-digit hex
    if (color.length === 3) {
      color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];
    }
    // Add # prefix
    return "#" + color.toLowerCase();
  }

  // Function to validate hex color
  function isValidHex(color) {
    return /^#?([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$/.test(color);
  }

  // Add event listeners
  document.addEventListener("DOMContentLoaded", () => {
    const color1Input = document.getElementById("color1");
    const color2Input = document.getElementById("color2");
    const color1Picker = document.getElementById("color1-picker");
    const color2Picker = document.getElementById("color2-picker");

    color1Input.value = "#000000";
    color2Input.value = "#FFFFFF";
    color1Picker.value = "#000000";
    color2Picker.value = "#FFFFFF";

    // Text input event handlers
    [color1Input, color2Input].forEach((input) => {
      input.addEventListener("input", (e) => {
        let color = e.target.value;
        // Add # if missing
        if (color.charAt(0) !== "#") {
          color = "#" + color;
        }
        if (isValidHex(color)) {
          const normalizedColor = normalizeHex(color);
          // Update corresponding color picker
          const picker = document.getElementById(e.target.id + "-picker");
          picker.value = normalizedColor;
          updateContrast();
        }
      });

      // Update on blur to handle invalid values
      input.addEventListener("blur", (e) => {
        if (!isValidHex(e.target.value)) {
          e.target.value = e.target.id === "color1" ? "#000000" : "#FFFFFF";
          updateContrast();
        }
      });
    });

    // Color picker event handlers
    [color1Picker, color2Picker].forEach((picker) => {
      picker.addEventListener("input", (e) => {
        // Update corresponding text input
        const textInput = document.getElementById(
          e.target.id.replace("-picker", ""),
        );
        textInput.value = e.target.value.toLowerCase();
        updateContrast();
      });
    });

    updateContrast();
  });
</script>
