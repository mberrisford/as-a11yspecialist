---
import BaseLayout from "./BaseLayout.astro";
import ShareButton from "../components/ShareButton.astro";
const { frontmatter } = Astro.props;

// Get the raw content
const content = await Astro.slots.render("default");

// Function to generate consistent IDs
function generateId(text) {
  return text
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");
}

// Extract h2 headings and create TOC items
const headings = [];
const regex = /<h2.*?>(.*?)<\/h2>/g;
let match;

while ((match = regex.exec(content)) !== null) {
  const text = match[1].replace(/<[^>]*>/g, ""); // Remove any HTML tags inside heading
  const id = generateId(text);
  headings.push({ text, id });
}
---

<BaseLayout pageTitle={frontmatter.title}>
  <h1>{frontmatter.title}</h1>
  <p>
    Posted
    <time datetime={new Date(frontmatter.pubDate).toISOString().split("T")[0]}>
      {
        new Date(frontmatter.pubDate).toLocaleDateString("en-CA", {
          year: "numeric",
          month: "long",
          day: "numeric",
        })
      }
    </time>
    {frontmatter.author && <span> by {frontmatter.author}</span>}
  </p>

  {
    frontmatter.image && (
      <img
        src={frontmatter.image.url}
        width="600"
        alt={frontmatter.image.alt}
      />
    )
  }

  {
    headings.length > 0 && (
      <>
        <div role="navigation" aria-labelledby="TOC-heading">
          <h2 id="TOC-heading">In this article</h2>
          <ul>
            {headings.map(({ text, id }) => (
              <li>
                <a href={`#${id}`}>{text}</a>
              </li>
            ))}
          </ul>
        </div>
      </>
    )
  }

  <slot />

  <ShareButton buttonText="Share this post" />

  <h2 id="tags">Tags:</h2>
  {
    frontmatter.tags && frontmatter.tags.length > 0 && (
      <ul>
        {frontmatter.tags.map((tag) => (
          <li>
            <a href={`/tags/${tag}`}>{tag}</a>
          </li>
        ))}
      </ul>
    )
  }
</BaseLayout>

<script define:vars={{ headings }}>
  // Function to initialize headings
  function initializeHeadings() {
    // Add tabindex to h2 headings if they don't have them
    document
      .querySelectorAll("h2:not(#TOC-heading)")
      .forEach((heading, index) => {
        // Use the pre-generated IDs from the server
        if (index < headings.length) {
          heading.id = headings[index].id;
        }
        // Always set tabindex="-1" on content headings
        heading.setAttribute("tabindex", "-1");
      });
  }

  // Function to initialize code blocks
  function initializeCodeBlocks() {
    document.querySelectorAll("pre").forEach((pre) => {
      // Only add the copy button if it doesn't already exist
      if (!pre.querySelector(".copy-button")) {
        const copyButton = document.createElement("button");
        copyButton.className = "copy-button";
        copyButton.setAttribute("aria-label", "Copy code to clipboard");
        copyButton.textContent = "Copy";
        pre.appendChild(copyButton);

        copyButton.addEventListener("click", async () => {
          const code = pre.querySelector("code");
          if (code) {
            try {
              await navigator.clipboard.writeText(code.textContent || "");
              copyButton.textContent = "Copied!";
              setTimeout(() => {
                copyButton.textContent = "Copy";
              }, 2000);
            } catch (err) {
              console.error("Failed to copy text: ", err);
            }
          }
        });
      }
    });
  }

  // Initialize everything when the page loads
  initializeHeadings();
  initializeCodeBlocks();

  // Create a MutationObserver to watch for changes
  const observer = new MutationObserver(() => {
    initializeHeadings();
    initializeCodeBlocks();
  });

  // Start observing the document with the configured parameters
  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });
</script>

<style is:global>
  pre:focus-visible {
    outline: none;
    box-shadow: 0 0 0 var(--pico-outline-width) var(--pico-primary-focus);
  }

  /* Style for focused headings */
  h2:focus-visible {
    outline: none;
    box-shadow: 0 0 0 var(--pico-outline-width) var(--pico-primary-focus);
  }

  .share-button {
    margin: 1rem 0;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    background-color: var(--primary);
    color: var(--primary-inverse);
    border: none;
    cursor: pointer;
    transition: opacity 0.2s ease;
  }

  .share-button:hover,
  .share-button:focus {
    opacity: 0.9;
  }

  .share-button:focus {
    outline: 2px solid var(--primary);
    outline-offset: 2px;
  }
</style>
