---
import BaseLayout from "./BaseLayout.astro";
const { frontmatter } = Astro.props;

// Get the raw content
const content = await Astro.slots.render("default");

// Function to generate consistent IDs
function generateId(text) {
  return text
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");
}

// Extract h2 headings and create TOC items
const headings = [];
const regex = /<h2.*?>(.*?)<\/h2>/g;
let match;

while ((match = regex.exec(content)) !== null) {
  const text = match[1].replace(/<[^>]*>/g, ""); // Remove any HTML tags inside heading
  const id = generateId(text);
  headings.push({ text, id });
}
---

<BaseLayout pageTitle={frontmatter.title}>
  <h1>{frontmatter.title}</h1>
  <p>
    Posted
    <time datetime={new Date(frontmatter.pubDate).toISOString().split("T")[0]}>
      {
        new Date(frontmatter.pubDate).toLocaleDateString("en-CA", {
          year: "numeric",
          month: "long",
          day: "numeric",
        })
      }
    </time>
    {frontmatter.author && <span> by {frontmatter.author}</span>}
  </p>

  {
    frontmatter.image && (
      <img
        src={frontmatter.image.url}
        width="600"
        alt={frontmatter.image.alt}
      />
    )
  }

  {
    headings.length > 0 && (
      <>
        <div role="navigation" aria-labelledby="TOC-heading">
          <h2 id="TOC-heading">In this article</h2>
          <ul>
            {headings.map(({ text, id }) => (
              <li>
                <a href={`#${id}`}>{text}</a>
              </li>
            ))}
          </ul>
        </div>
      </>
    )
  }

  <slot />

  <h2 id="tags">Tags:</h2>
  {
    frontmatter.tags && frontmatter.tags.length > 0 && (
      <ul>
        {frontmatter.tags.map((tag) => (
          <li>
            <a href={`/tags/${tag}`}>{tag}</a>
          </li>
        ))}
      </ul>
    )
  }
</BaseLayout>

<script define:vars={{ headings }}>
  // Function to check if an element is scrollable
  function isScrollable(element) {
    return (
      element.scrollWidth > element.clientWidth ||
      element.scrollHeight > element.clientHeight
    );
  }

  // Function to update tabindex based on scrollability
  function updateTabIndex(element) {
    if (isScrollable(element)) {
      element.setAttribute("tabindex", "0");
    } else {
      element.removeAttribute("tabindex");
    }
  }

  // Function to initialize headings
  function initializeHeadings() {
    // Add tabindex to h2 headings if they don't have them
    document.querySelectorAll("h2:not(#TOC-heading)").forEach((heading, index) => {
      // Use the pre-generated IDs from the server
      if (index < headings.length) {
        heading.id = headings[index].id;
      }
      // Always set tabindex="-1" on content headings
      heading.setAttribute("tabindex", "-1");
    });
  }

  // Function to initialize code blocks
  function initializeCodeBlocks() {
    const preElements = document.querySelectorAll("pre");

    // Create a ResizeObserver to watch for size changes
    const resizeObserver = new ResizeObserver((entries) => {
      entries.forEach((entry) => {
        updateTabIndex(entry.target);
      });
    });

    // Observe each pre element
    preElements.forEach((pre) => {
      updateTabIndex(pre); // Initial check
      resizeObserver.observe(pre);
    });

    // Also update on window resize (for safety, in case ResizeObserver misses anything)
    window.addEventListener("resize", () => {
      preElements.forEach(updateTabIndex);
    });
  }

  // Initialize everything when the DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    initializeHeadings();
    initializeCodeBlocks();
  });

  // Also handle dynamic content changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === "childList") {
        initializeHeadings();
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });
</script>

<style is:global>
  pre:focus-visible {
    outline: none;
    box-shadow: 0 0 0 var(--pico-outline-width) var(--pico-primary-focus);
  }

  /* Style for focused headings */
  h2:focus-visible {
    outline: none;
    box-shadow: 0 0 0 var(--pico-outline-width) var(--pico-primary-focus);
  }
</style>
